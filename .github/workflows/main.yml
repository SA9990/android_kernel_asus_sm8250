name: Kernel Build

on:
  push:
    branches:
      - main
      - "release/*" # Trigger on branches starting with "release/"
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allow manual trigger
  schedule: # Scheduled builds
    - cron: "0 2 * * *" # Daily at 2:00 AM UTC

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ARCH: arm64
      SUBARCH: arm64
      KERNEL_DEFCONFIG: vendor/obiwan_defconfig
      CLANG_PATH: ${{ github.workspace }}/toolchains/clang-r522817
      KERNEL_IMAGE: out/arch/arm64/boot/Image.gz-dtb

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # Step 2: Download and Set Up Google's Clang
      - name: Download and Set Up Google's Prebuilt Clang
        run: |
          mkdir -p toolchains
          curl -L -o clang-r522817.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r522817.tar.gz
          mkdir -p toolchains/clang-r522817
          tar -xzf clang-r522817.tar.gz -C toolchains/clang-r522817
          rm clang-r522817.tar.gz

      # Step 3: Install dependencies
      - name: Install Build Dependencies
        run: |
          sudo apt update
          sudo apt install -y bc bison flex libssl-dev make gcc curl cpio build-essential libncurses-dev

      # Step 4: Configure and Build the Kernel
      - name: Build the Kernel
        run: |
          make O=out ARCH=$ARCH $KERNEL_DEFCONFIG
          make -j$(nproc) O=out ARCH=$ARCH \
            CC=${CLANG_PATH}/bin/clang \
            CROSS_COMPILE=${CLANG_PATH}/bin/aarch64-linux-gnu- \
            CROSS_COMPILE_ARM32=${CLANG_PATH}/bin/arm-linux-gnueabi-

      # Step 5: Upload Kernel Artifacts
      - name: Upload Kernel Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Kernel-Artifacts
          path: |
            out/arch/arm64/boot/
            out/arch/arm64/boot/Image.gz-dtb

      # Step 6: Validate Kernel Image
      - name: Validate Kernel Image
        run: |
          if [ ! -f "$KERNEL_IMAGE" ]; then
            echo "Kernel build failed: $KERNEL_IMAGE not found"
            exit 1
          fi
          echo "Kernel built successfully: $KERNEL_IMAGE"
